<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.5</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.falcon</groupId>
    <artifactId>movies</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>movies</name>
    <description>Movie service for android app</description>

    <properties>
        <java.version>17</java.version>
        <org.mapstruct.version>1.4.1.Final</org.mapstruct.version>
        <maven.compiler.plugin.version>3.13.0</maven.compiler.plugin.version>
        <failsafe.version>3.2.5</failsafe.version>
        <jacoco.version>0.8.8</jacoco.version>
        <loki.logback.version>1.4.0</loki.logback.version>
    </properties>

    <dependencies>
        <!-- https://mvnrepository.com/artifact/javax.validation/validation-api -->
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>2.0.1.Final</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Reload on build -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.hsqldb</groupId>
            <artifactId>hsqldb</artifactId>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${org.mapstruct.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>${failsafe.version}</version>
        </dependency>

        <dependency>
            <groupId>com.github.loki4j</groupId>
            <artifactId>loki-logback-appender</artifactId>
            <version>${loki.logback.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
        </dependency>

    </dependencies>

    <profiles>

        <!--		Profile for running integration tests -->
        <profile>
            <id>failsafe</id>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${failsafe.version}</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

<!--        Profile for logging to the specific path on the server for Grafana support -->
        <profile>
            <id>grafana</id>
            <properties>
                <spring.profiles.active>grafana</spring.profiles.active>
            </properties>
        </profile>
    </profiles>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.plugin.version}</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${org.mapstruct.version}</version>
                        </path>
                        <annotationProcessorPath>
                            <groupId>org.hibernate</groupId>
                            <artifactId>hibernate-jpamodelgen</artifactId>
                            <version>${hibernate.version}</version>
                        </annotationProcessorPath>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>

            <!--	******** Code Cov plugin
                    Running mvn test will include a code coverage report (an exec)
                    file that is also converted to an html page,
                    like many other coverage tools. The Pom file above writes to the target directory,
                    which you can then store as an artifact in your CircleCI config.yml file

                    Use mvn verify or mvn test to generate report and save into /target/my-reports/
            -->
            <!--Run integration tests-->

            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${failsafe.version}</version>
                <configuration>
                    <includes>
                        <include>**/*IT</include>
                    </includes>
                    <excludes>
                        <exclude>
                            **/BigDataTestIT.java
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>

            <!-- Create tests report -->
            <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <version>${jacoco.version}</version>
            <executions>

            <execution>
                <id>prepare-agent-unit-tests</id>
                <goals>
                    <goal>prepare-agent</goal>
                </goals>
                <configuration>
                    <destFile>target/jacoco-unit.exec</destFile>
                </configuration>
            </execution>

            <execution>
                <id>prepare-agent-integration-tests</id>
                <goals>
                    <goal>prepare-agent-integration</goal>
                </goals>
                <configuration>
                    <destFile>target/jacoco-integration.exec</destFile>
                    <append>true</append>
                </configuration>
            </execution>

            <execution>
                <id>report</id>
                <phase>post-integration-test</phase>
                <goals>
                    <goal>merge</goal>
                    <goal>report</goal>
                </goals>
                <configuration>
                    <!-- merge goal config -->
                    <destFile>target/jacoco-merge.exec</destFile>
                    <fileSets>
                        <fileSet>
                            <directory>target</directory>
                            <includes>
                                <include>*.exec</include>
                            </includes>
                        </fileSet>
                    </fileSets>
                    <!-- report goal config -->
                    <dataFile>target/jacoco-merge.exec</dataFile>
                    <outputDirectory>target/my-reports</outputDirectory>
                </configuration>
            </execution>
            </executions>
            </plugin>

        </plugins>
    </build>

</project>
